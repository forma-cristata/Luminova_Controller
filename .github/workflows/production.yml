name: Production Version Management

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

jobs:
  version-increment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Determine version increment type
        id: version-type
        run: |
          # Check commit messages for version increment hints
          COMMIT_MSG=$(git log -1 --pretty=%B)

          if [[ "$COMMIT_MSG" =~ \[major\]|\[MAJOR\]|BREAKING\ CHANGE ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" =~ \[minor\]|\[MINOR\]|\[feature\]|\[FEATURE\] ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Run production script
        id: increment-version
        run: |
          node scripts/production.js ${{ steps.version-type.outputs.type }}
          NEW_VERSION=$(node -e "console.log(require('./app.json').expo.version)")
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit version changes
        if: github.event_name == 'push'
        run: |
          git add app.json
          if ! git diff --cached --quiet; then
            git commit -m "chore: bump version to ${{ steps.increment-version.outputs.version }} [skip ci]"
            git push
          else
            echo "No version changes to commit"
          fi

      - name: Create GitHub release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.increment-version.outputs.version }}
          release_name: Release v${{ steps.increment-version.outputs.version }}
          body: |
            ## Changes in v${{ steps.increment-version.outputs.version }}

            - Version increment: ${{ steps.version-type.outputs.type }}
            - Commit: ${{ github.sha }}

            **Auto-generated by Luminova Production Script**
          draft: false
          prerelease: false

  docker-build:
    runs-on: ubuntu-latest
    needs: version-increment
    if: github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Get version from app.json
        id: get-version
        run: |
          VERSION=$(node -e "console.log(require('./app.json').expo.version)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/luminova-controller:latest
            ${{ secrets.DOCKER_USERNAME }}/luminova-controller:v${{ steps.get-version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Docker image (PR)
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: luminova-controller:pr-${{ github.event.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
